
// Code generated by stanc v2.28.0
#include <stan/model/model_header.hpp>
namespace bt_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 279> locations_array__ = 
{" (found before start of program)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 162, column 2 to column 32)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 165, column 2 to column 40)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 167, column 2 to column 38)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 169, column 2 to column 45)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 171, column 2 to column 59)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 172, column 2 to column 45)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 174, column 2 to column 59)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 175, column 2 to column 45)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 177, column 2 to column 59)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 181, column 2 to column 101)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 184, column 2 to column 39)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 189, column 2 to column 25)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 190, column 2 to column 10)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 191, column 2 to column 10)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 194, column 2 to column 24)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 195, column 2 to column 40)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 197, column 2 to column 24)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 198, column 2 to column 40)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 200, column 2 to column 24)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 201, column 2 to column 40)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 203, column 2 to column 69)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 204, column 2 to column 34)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 210, column 4 to column 11)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 209, column 7 to line 211, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 208, column 4 to column 21)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 207, column 18 to line 209, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 207, column 2 to line 211, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 217, column 4 to column 11)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 216, column 7 to line 218, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 215, column 4 to column 21)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 214, column 21 to line 216, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 214, column 2 to line 218, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 225, column 4 to column 15)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 228, column 8 to column 20)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 227, column 4 to line 229, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 226, column 4 to line 229, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 224, column 8 to line 230, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 222, column 4 to column 29)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 223, column 4 to column 18)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 221, column 12 to line 224, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 221, column 2 to line 230, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 237, column 4 to column 15)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 240, column 8 to column 20)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 239, column 4 to line 241, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 238, column 4 to line 241, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 236, column 7 to line 242, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 234, column 4 to column 29)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 235, column 4 to column 18)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 233, column 12 to line 236, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 233, column 2 to line 242, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 248, column 4 to column 15)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 251, column 6 to column 18)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 250, column 4 to line 252, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 249, column 4 to line 252, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 247, column 7 to line 253, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 245, column 4 to column 29)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 246, column 4 to column 18)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 244, column 12 to line 247, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 244, column 2 to line 253, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 261, column 6 to column 17)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 260, column 4 to line 262, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 259, column 4 to line 262, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 258, column 8 to line 263, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 257, column 4 to column 16)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 256, column 27 to line 258, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 256, column 2 to line 263, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 272, column 4 to column 13)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 273, column 4 to column 26)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 271, column 8 to line 274, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 267, column 4 to column 16)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 269, column 6 to column 67)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 268, column 25 to line 270, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 268, column 4 to line 270, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 266, column 21 to line 271, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 266, column 2 to line 274, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 371, column 0 to column 42)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 376, column 4 to column 16)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 377, column 4 to column 15)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 378, column 4 to column 23)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 380, column 4 to line 387, column 59)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 388, column 4 to column 27)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 389, column 4 to column 25)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 397, column 6 to column 49)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 396, column 8 to line 398, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 394, column 6 to column 45)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 393, column 15 to line 395, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 393, column 4 to line 398, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 375, column 4 to line 399, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 374, column 4 to line 399, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 373, column 18 to line 400, column 1)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 373, column 2 to line 400, column 1)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 280, column 4 to column 60)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 283, column 6 to column 50)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 282, column 23 to line 284, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 282, column 4 to line 284, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 288, column 4 to column 42)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 293, column 8 to column 38)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 292, column 22 to line 294, column 7)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 292, column 6 to line 294, column 7)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 291, column 4 to line 295, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 290, column 4 to line 295, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 287, column 14 to line 296, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 287, column 4 to line 296, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 299, column 4 to column 42)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 304, column 8 to column 38)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 303, column 22 to line 305, column 7)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 303, column 6 to line 305, column 7)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 302, column 4 to line 306, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 301, column 4 to line 306, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 298, column 14 to line 307, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 298, column 4 to line 307, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 310, column 4 to column 42)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 315, column 8 to column 38)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 314, column 22 to line 316, column 7)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 314, column 6 to line 316, column 7)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 313, column 4 to line 317, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 312, column 4 to line 317, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 309, column 14 to line 318, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 309, column 4 to line 318, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 321, column 5 to column 49)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 320, column 18 to line 322, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 320, column 2 to line 322, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 325, column 5 to column 57)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 324, column 21 to line 326, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 324, column 2 to line 326, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 332, column 8 to column 47)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 331, column 37 to line 333, column 7)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 331, column 6 to line 333, column 7)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 330, column 4 to line 334, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 329, column 4 to line 334, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 328, column 27 to line 335, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 328, column 2 to line 335, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 341, column 4 to column 16)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 342, column 4 to column 15)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 343, column 4 to column 23)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 346, column 4 to line 353, column 59)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 354, column 4 to column 27)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 355, column 4 to column 25)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 362, column 6 to column 46)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 361, column 8 to line 363, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 359, column 7 to column 43)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 358, column 15 to line 360, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 358, column 4 to line 363, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 340, column 2 to line 365, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 339, column 2 to line 365, column 3)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 103, column 2 to column 24)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 104, column 27 to column 34)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 104, column 2 to column 36)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 105, column 2 to column 26)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 106, column 32 to column 39)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 106, column 2 to column 41)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 107, column 32 to column 39)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 107, column 2 to column 41)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 110, column 2 to column 41)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 111, column 17 to column 46)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 111, column 2 to column 48)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 114, column 2 to column 32)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 115, column 2 to column 21)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 116, column 17 to column 37)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 116, column 2 to column 39)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 118, column 2 to column 32)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 119, column 2 to column 21)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 120, column 17 to column 37)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 120, column 2 to column 39)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 122, column 2 to column 32)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 123, column 2 to column 21)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 124, column 17 to column 37)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 124, column 2 to column 39)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 127, column 1 to column 46)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 128, column 1 to column 35)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 129, column 9 to column 44)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 129, column 46 to column 92)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 129, column 1 to column 104)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 133, column 2 to column 38)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 136, column 2 to column 41)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 137, column 2 to column 18)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 138, column 10 to column 41)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 138, column 43 to column 65)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 138, column 2 to column 69)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 143, column 2 to column 33)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 144, column 2 to column 23)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 146, column 2 to column 29)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 147, column 2 to column 19)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 149, column 2 to column 29)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 150, column 2 to column 29)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 151, column 2 to column 29)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 153, column 2 to column 19)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 154, column 2 to column 29)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 156, column 2 to column 28)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 158, column 2 to column 38)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 162, column 21 to column 30)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 165, column 16 to column 38)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 167, column 16 to column 36)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 169, column 30 to column 43)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 171, column 16 to column 38)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 171, column 40 to column 57)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 172, column 30 to column 43)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 174, column 16 to column 38)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 174, column 40 to column 57)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 175, column 30 to column 43)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 177, column 16 to column 38)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 177, column 40 to column 57)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 181, column 15 to column 51)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 181, column 53 to column 99)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 184, column 15 to column 37)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 189, column 14 to column 23)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 195, column 10 to column 19)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 195, column 21 to column 38)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 198, column 10 to column 19)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 198, column 21 to column 38)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 201, column 10 to column 19)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 201, column 21 to column 38)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 203, column 9 to column 18)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 203, column 20 to column 67)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 204, column 9 to column 32)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 371, column 7 to column 32)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 21, column 4 to column 16)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 22, column 4 to column 15)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 23, column 4 to column 12)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 24, column 4 to column 12)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 25, column 4 to column 17)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 26, column 4 to column 17)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 27, column 4 to column 25)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 30, column 4 to column 11)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 31, column 4 to column 13)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 32, column 4 to column 13)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 33, column 4 to column 13)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 34, column 4 to column 13)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 35, column 4 to column 13)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 36, column 4 to column 13)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 37, column 4 to column 13)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 38, column 4 to column 19)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 39, column 4 to column 12)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 40, column 4 to column 12)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 45, column 6 to column 12)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 44, column 9 to line 46, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 43, column 6 to column 23)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 42, column 23 to line 44, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 42, column 4 to line 46, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 52, column 6 to column 14)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 53, column 6 to column 14)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 51, column 9 to line 54, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 49, column 6 to column 50)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 50, column 6 to column 50)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 48, column 14 to line 51, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 48, column 4 to line 54, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 60, column 6 to column 14)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 61, column 6 to column 14)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 59, column 9 to line 62, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 57, column 6 to column 50)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 58, column 6 to column 50)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 56, column 14 to line 59, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 56, column 4 to line 62, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 68, column 6 to column 14)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 69, column 6 to column 14)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 67, column 9 to line 70, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 65, column 6 to column 50)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 66, column 6 to column 50)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 64, column 15 to line 67, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 64, column 5 to line 70, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 77, column 6 to column 13)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 78, column 6 to column 13)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 76, column 9 to line 79, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 74, column 6 to column 84)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 75, column 6 to column 84)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 73, column 29 to line 76, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 73, column 4 to line 79, column 5)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 81, column 4 to column 85)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 82, column 4 to column 92)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 86, column 4 to column 97)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 87, column 4 to column 22)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 88, column 4 to column 22)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 90, column 4 to column 35)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 91, column 4 to column 40)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 93, column 4 to column 29)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 94, column 4 to column 27)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 96, column 4 to column 24)",
 " (in 'C:/Users/dmattos/pybpcs-project/pybpcs/stan/bt.stan', line 18, column 0 to line 97, column 1)"};


template <typename T3__, typename T5__, typename T6__, typename T8__,
typename T11__, typename T12__, typename T15__, typename T16__,
typename T19__, typename T20__, typename T22__, typename T23__>
std::vector<stan::promote_args_t<T3__, T5__, T6__, T8__,
T11__, stan::promote_args_t<T12__, T15__, T16__, T19__,
T20__, stan::promote_args_t<T22__,
stan::value_type_t<T23__>>>>>
calculate_p1_win_and_ties(const int& i,
                          const std::vector<int>& player1_indexes,
                          const std::vector<int>& player0_indexes,
                          const std::vector<T3__>& lambda,
                          const int& use_Ordereffect,
                          const std::vector<T5__>& z_player1, const T6__& gm,
                          const int& use_Davidson, const T8__& nu,
                          const int& use_U1,
                          const std::vector<int>& U1_indexes,
                          const std::vector<std::vector<T11__>>& U1,
                          const T12__& U1_std, const int& use_U2,
                          const std::vector<int>& U2_indexes,
                          const std::vector<std::vector<T15__>>& U2,
                          const T16__& U2_std, const int& use_U3,
                          const std::vector<int>& U3_indexes,
                          const std::vector<std::vector<T19__>>& U3,
                          const T20__& U3_std,
                          const int& use_SubjectPredictors,
                          const std::vector<std::vector<T22__>>& S,
                          const T23__& X_subject_arg__,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T3__,
          T5__,
          T6__,
          T8__,
          T11__, stan::promote_args_t<T12__,
          T15__,
          T16__,
          T19__,
          T20__, stan::promote_args_t<T22__,
          stan::value_type_t<T23__>>>>;
  int current_statement__ = 0; 
  const auto& X_subject = to_ref(X_subject_arg__);
  static constexpr bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  try {
    local_scalar_t__ p1_win;
    p1_win = DUMMY_VAR__;
    
    local_scalar_t__ p_tie;
    p_tie = DUMMY_VAR__;
    
    local_scalar_t__ p1;
    p1 = DUMMY_VAR__;
    
    local_scalar_t__ p0;
    p0 = DUMMY_VAR__;
    
    local_scalar_t__ lambda1;
    lambda1 = DUMMY_VAR__;
    
    local_scalar_t__ lambda0;
    lambda0 = DUMMY_VAR__;
    
    std::vector<local_scalar_t__> return_value;
    return_value = std::vector<local_scalar_t__>(2, DUMMY_VAR__);
    
    local_scalar_t__ z;
    z = DUMMY_VAR__;
    
    local_scalar_t__ U01;
    U01 = DUMMY_VAR__;
    
    local_scalar_t__ U11;
    U11 = DUMMY_VAR__;
    
    local_scalar_t__ U02;
    U02 = DUMMY_VAR__;
    
    local_scalar_t__ U12;
    U12 = DUMMY_VAR__;
    
    local_scalar_t__ U03;
    U03 = DUMMY_VAR__;
    
    local_scalar_t__ U13;
    U13 = DUMMY_VAR__;
    
    local_scalar_t__ tie;
    tie = DUMMY_VAR__;
    
    local_scalar_t__ geom_term;
    geom_term = DUMMY_VAR__;
    
    local_scalar_t__ S0;
    S0 = DUMMY_VAR__;
    
    local_scalar_t__ S1;
    S1 = DUMMY_VAR__;
    
    current_statement__ = 239;
    if (use_Ordereffect) {
      current_statement__ = 237;
      z = rvalue(z_player1, "z_player1", index_uni(i));
    } else {
      current_statement__ = 235;
      z = 0;
    }
    current_statement__ = 246;
    if (use_U1) {
      current_statement__ = 243;
      U01 = rvalue(U1, "U1",
              index_uni(rvalue(player0_indexes, "player0_indexes",
                          index_uni(i))),
                index_uni(rvalue(U1_indexes, "U1_indexes", index_uni(i))));
      current_statement__ = 244;
      U11 = rvalue(U1, "U1",
              index_uni(rvalue(player1_indexes, "player1_indexes",
                          index_uni(i))),
                index_uni(rvalue(U1_indexes, "U1_indexes", index_uni(i))));
    } else {
      current_statement__ = 240;
      U01 = 0;
      current_statement__ = 241;
      U11 = 0;
    }
    current_statement__ = 253;
    if (use_U2) {
      current_statement__ = 250;
      U02 = rvalue(U2, "U2",
              index_uni(rvalue(player0_indexes, "player0_indexes",
                          index_uni(i))),
                index_uni(rvalue(U2_indexes, "U2_indexes", index_uni(i))));
      current_statement__ = 251;
      U12 = rvalue(U2, "U2",
              index_uni(rvalue(player1_indexes, "player1_indexes",
                          index_uni(i))),
                index_uni(rvalue(U2_indexes, "U2_indexes", index_uni(i))));
    } else {
      current_statement__ = 247;
      U02 = 0;
      current_statement__ = 248;
      U12 = 0;
    }
    current_statement__ = 260;
    if (use_U3) {
      current_statement__ = 257;
      U03 = rvalue(U3, "U3",
              index_uni(rvalue(player0_indexes, "player0_indexes",
                          index_uni(i))),
                index_uni(rvalue(U3_indexes, "U3_indexes", index_uni(i))));
      current_statement__ = 258;
      U13 = rvalue(U3, "U3",
              index_uni(rvalue(player1_indexes, "player1_indexes",
                          index_uni(i))),
                index_uni(rvalue(U3_indexes, "U3_indexes", index_uni(i))));
    } else {
      current_statement__ = 254;
      U03 = 0;
      current_statement__ = 255;
      U13 = 0;
    }
    current_statement__ = 267;
    if (use_SubjectPredictors) {
      current_statement__ = 264;
      S1 = dot_product(
             to_vector(
               rvalue(S, "S",
                 index_uni(rvalue(player1_indexes, "player1_indexes",
                             index_uni(i))), index_omni())),
             to_vector(
               rvalue(X_subject, "X_subject", index_uni(i), index_omni())));
      current_statement__ = 265;
      S0 = dot_product(
             to_vector(
               rvalue(S, "S",
                 index_uni(rvalue(player0_indexes, "player0_indexes",
                             index_uni(i))), index_omni())),
             to_vector(
               rvalue(X_subject, "X_subject", index_uni(i), index_omni())));
    } else {
      current_statement__ = 261;
      S0 = 0;
      current_statement__ = 262;
      S1 = 0;
    }
    current_statement__ = 268;
    lambda1 = ((((rvalue(lambda, "lambda",
                    index_uni(rvalue(player1_indexes, "player1_indexes",
                                index_uni(i)))) + (U1_std * U11)) +
                  (U2_std * U12)) + (U3_std * U13)) + S1);
    current_statement__ = 269;
    lambda0 = (((((rvalue(lambda, "lambda",
                     index_uni(rvalue(player0_indexes, "player0_indexes",
                                 index_uni(i)))) + (U1_std * U01)) +
                   (U2_std * U02)) + (U3_std * U03)) + (gm * z)) + S0);
    current_statement__ = 270;
    geom_term = (use_Davidson *
                  stan::math::exp(
                    (nu +
                      (0.5 *
                        (rvalue(lambda, "lambda",
                           index_uni(rvalue(player1_indexes,
                                       "player1_indexes", index_uni(i)))) +
                          rvalue(lambda, "lambda",
                            index_uni(rvalue(player0_indexes,
                                        "player0_indexes", index_uni(i)))))))));
    current_statement__ = 271;
    p1 = stan::math::exp(lambda1);
    current_statement__ = 272;
    p0 = stan::math::exp(lambda0);
    current_statement__ = 273;
    p1_win = (p1 / ((p0 + p1) + geom_term));
    current_statement__ = 274;
    p_tie = (geom_term / ((p0 + p1) + geom_term));
    current_statement__ = 275;
    assign(return_value, p1_win,
      "assigning variable return_value", index_uni(1));
    current_statement__ = 276;
    assign(return_value, p_tie,
      "assigning variable return_value", index_uni(2));
    current_statement__ = 277;
    return return_value;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
  
}

struct calculate_p1_win_and_ties_functor__ {
template <typename T3__, typename T5__, typename T6__, typename T8__,
typename T11__, typename T12__, typename T15__, typename T16__,
typename T19__, typename T20__, typename T22__, typename T23__>
std::vector<stan::promote_args_t<T3__, T5__, T6__, T8__,
T11__, stan::promote_args_t<T12__, T15__, T16__, T19__,
T20__, stan::promote_args_t<T22__,
stan::value_type_t<T23__>>>>>
operator()(const int& i, const std::vector<int>& player1_indexes,
           const std::vector<int>& player0_indexes,
           const std::vector<T3__>& lambda, const int& use_Ordereffect,
           const std::vector<T5__>& z_player1, const T6__& gm,
           const int& use_Davidson, const T8__& nu, const int& use_U1,
           const std::vector<int>& U1_indexes,
           const std::vector<std::vector<T11__>>& U1, const T12__& U1_std,
           const int& use_U2, const std::vector<int>& U2_indexes,
           const std::vector<std::vector<T15__>>& U2, const T16__& U2_std,
           const int& use_U3, const std::vector<int>& U3_indexes,
           const std::vector<std::vector<T19__>>& U3, const T20__& U3_std,
           const int& use_SubjectPredictors,
           const std::vector<std::vector<T22__>>& S, const T23__& X_subject,
           std::ostream* pstream__)  const 
{
return calculate_p1_win_and_ties(i, player1_indexes, player0_indexes, lambda,
         use_Ordereffect, z_player1, gm, use_Davidson, nu, use_U1,
         U1_indexes, U1, U1_std, use_U2, U2_indexes, U2, U2_std, use_U3,
         U3_indexes, U3, U3_std, use_SubjectPredictors, S, X_subject,
         pstream__);
}
};

class bt_model final : public model_base_crtp<bt_model> {

 private:
  int N_total;
  std::vector<int> y;
  int N_players;
  std::vector<int> player0_indexes;
  std::vector<int> player1_indexes;
  int use_Ordereffect;
  std::vector<double> z_player1;
  int use_U1;
  int N_U1;
  std::vector<int> U1_indexes;
  int use_U2;
  int N_U2;
  std::vector<int> U2_indexes;
  int use_U3;
  int N_U3;
  std::vector<int> U3_indexes;
  int use_SubjectPredictors;
  int N_SubjectPredictors;
  Eigen::Matrix<double, -1, -1> X_subject__;
  int use_Davidson;
  int use_Generalized;
  int K;
  Eigen::Matrix<double, -1, -1> X__;
  double prior_lambda_std;
  double prior_lambda_mu;
  double prior_gm_std;
  double prior_gm_mu;
  double prior_U1_std;
  double prior_U2_std;
  double prior_U3_std;
  double prior_nu_mu;
  double prior_nu_std;
  double prior_S_std;
  int calc_log_lik;
  int gm_param_1dim__;
  int nu_param_1dim__;
  int U1_std_param_1dim__;
  int U1_param_1dim__;
  int U1_param_2dim__;
  int U2_std_param_1dim__;
  int U2_param_1dim__;
  int U2_param_2dim__;
  int U3_std_param_1dim__;
  int U3_param_1dim__;
  int U3_param_2dim__;
  int S_param_1dim__;
  int S_param_2dim__;
  int B_param_1dim__;
  int U1_2dim__;
  int U2_2dim__;
  int U3_2dim__;
  int S_2dim__;
  int B_1dim__;
  int log_lik_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X_subject{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X{nullptr, 0, 0};
 
 public:
  ~bt_model() { }
  
  inline std::string model_name() const final { return "bt_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.28.0", "stancflags = "};
  }
  
  
  bt_model(stan::io::var_context& context__, unsigned int random_seed__ = 0,
           std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "bt_model_namespace::bt_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = 1;
      current_statement__ = 146;
      context__.validate_dims("data initialization","N_total","int",
           std::vector<size_t>{});
      N_total = std::numeric_limits<int>::min();
      
      current_statement__ = 146;
      N_total = context__.vals_i("N_total")[(1 - 1)];
      current_statement__ = 146;
      check_greater_or_equal(function__, "N_total", N_total, 1);
      current_statement__ = 147;
      validate_non_negative_index("y", "N_total", N_total);
      current_statement__ = 148;
      context__.validate_dims("data initialization","y","int",
           std::vector<size_t>{static_cast<size_t>(N_total)});
      y = std::vector<int>(N_total, std::numeric_limits<int>::min());
      
      current_statement__ = 148;
      y = context__.vals_i("y");
      current_statement__ = 148;
      for (int sym1__ = 1; sym1__ <= N_total; ++sym1__) {
        current_statement__ = 148;
        check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);
      }
      current_statement__ = 148;
      for (int sym1__ = 1; sym1__ <= N_total; ++sym1__) {
        current_statement__ = 148;
        check_less_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 2);
      }
      current_statement__ = 149;
      context__.validate_dims("data initialization","N_players","int",
           std::vector<size_t>{});
      N_players = std::numeric_limits<int>::min();
      
      current_statement__ = 149;
      N_players = context__.vals_i("N_players")[(1 - 1)];
      current_statement__ = 149;
      check_greater_or_equal(function__, "N_players", N_players, 1);
      current_statement__ = 150;
      validate_non_negative_index("player0_indexes", "N_total", N_total);
      current_statement__ = 151;
      context__.validate_dims("data initialization","player0_indexes","int",
           std::vector<size_t>{static_cast<size_t>(N_total)});
      player0_indexes = std::vector<int>(N_total, std::numeric_limits<int>::min());
      
      
      current_statement__ = 151;
      player0_indexes = context__.vals_i("player0_indexes");
      current_statement__ = 151;
      for (int sym1__ = 1; sym1__ <= N_total; ++sym1__) {
        current_statement__ = 151;
        check_greater_or_equal(function__, "player0_indexes[sym1__]",
                               player0_indexes[(sym1__ - 1)], 1);
      }
      current_statement__ = 152;
      validate_non_negative_index("player1_indexes", "N_total", N_total);
      current_statement__ = 153;
      context__.validate_dims("data initialization","player1_indexes","int",
           std::vector<size_t>{static_cast<size_t>(N_total)});
      player1_indexes = std::vector<int>(N_total, std::numeric_limits<int>::min());
      
      
      current_statement__ = 153;
      player1_indexes = context__.vals_i("player1_indexes");
      current_statement__ = 153;
      for (int sym1__ = 1; sym1__ <= N_total; ++sym1__) {
        current_statement__ = 153;
        check_greater_or_equal(function__, "player1_indexes[sym1__]",
                               player1_indexes[(sym1__ - 1)], 1);
      }
      current_statement__ = 154;
      context__.validate_dims("data initialization","use_Ordereffect","int",
           std::vector<size_t>{});
      use_Ordereffect = std::numeric_limits<int>::min();
      
      current_statement__ = 154;
      use_Ordereffect = context__.vals_i("use_Ordereffect")[(1 - 1)];
      current_statement__ = 154;
      check_greater_or_equal(function__, "use_Ordereffect", use_Ordereffect,
                             0);
      current_statement__ = 154;
      check_less_or_equal(function__, "use_Ordereffect", use_Ordereffect, 1);
      current_statement__ = 155;
      validate_non_negative_index("z_player1",
                                  "use_Ordereffect ? N_total : 0",
                                  (use_Ordereffect ? N_total : 0));
      current_statement__ = 156;
      context__.validate_dims("data initialization","z_player1","double",
           std::vector<size_t>{
            static_cast<size_t>((use_Ordereffect ? N_total : 0))});
      z_player1 = std::vector<double>((use_Ordereffect ? N_total : 0), std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 156;
      z_player1 = context__.vals_r("z_player1");
      current_statement__ = 157;
      context__.validate_dims("data initialization","use_U1","int",
           std::vector<size_t>{});
      use_U1 = std::numeric_limits<int>::min();
      
      current_statement__ = 157;
      use_U1 = context__.vals_i("use_U1")[(1 - 1)];
      current_statement__ = 157;
      check_greater_or_equal(function__, "use_U1", use_U1, 0);
      current_statement__ = 157;
      check_less_or_equal(function__, "use_U1", use_U1, 1);
      current_statement__ = 158;
      context__.validate_dims("data initialization","N_U1","int",
           std::vector<size_t>{});
      N_U1 = std::numeric_limits<int>::min();
      
      current_statement__ = 158;
      N_U1 = context__.vals_i("N_U1")[(1 - 1)];
      current_statement__ = 158;
      check_greater_or_equal(function__, "N_U1", N_U1, 0);
      current_statement__ = 159;
      validate_non_negative_index("U1_indexes", "use_U1 ? N_total : 0",
                                  (use_U1 ? N_total : 0));
      current_statement__ = 160;
      context__.validate_dims("data initialization","U1_indexes","int",
           std::vector<size_t>{static_cast<size_t>((use_U1 ? N_total : 0))});
      U1_indexes = std::vector<int>((use_U1 ? N_total : 0), std::numeric_limits<int>::min());
      
      
      current_statement__ = 160;
      U1_indexes = context__.vals_i("U1_indexes");
      current_statement__ = 161;
      context__.validate_dims("data initialization","use_U2","int",
           std::vector<size_t>{});
      use_U2 = std::numeric_limits<int>::min();
      
      current_statement__ = 161;
      use_U2 = context__.vals_i("use_U2")[(1 - 1)];
      current_statement__ = 161;
      check_greater_or_equal(function__, "use_U2", use_U2, 0);
      current_statement__ = 161;
      check_less_or_equal(function__, "use_U2", use_U2, 1);
      current_statement__ = 162;
      context__.validate_dims("data initialization","N_U2","int",
           std::vector<size_t>{});
      N_U2 = std::numeric_limits<int>::min();
      
      current_statement__ = 162;
      N_U2 = context__.vals_i("N_U2")[(1 - 1)];
      current_statement__ = 162;
      check_greater_or_equal(function__, "N_U2", N_U2, 0);
      current_statement__ = 163;
      validate_non_negative_index("U2_indexes", "use_U2 ? N_total : 0",
                                  (use_U2 ? N_total : 0));
      current_statement__ = 164;
      context__.validate_dims("data initialization","U2_indexes","int",
           std::vector<size_t>{static_cast<size_t>((use_U2 ? N_total : 0))});
      U2_indexes = std::vector<int>((use_U2 ? N_total : 0), std::numeric_limits<int>::min());
      
      
      current_statement__ = 164;
      U2_indexes = context__.vals_i("U2_indexes");
      current_statement__ = 165;
      context__.validate_dims("data initialization","use_U3","int",
           std::vector<size_t>{});
      use_U3 = std::numeric_limits<int>::min();
      
      current_statement__ = 165;
      use_U3 = context__.vals_i("use_U3")[(1 - 1)];
      current_statement__ = 165;
      check_greater_or_equal(function__, "use_U3", use_U3, 0);
      current_statement__ = 165;
      check_less_or_equal(function__, "use_U3", use_U3, 1);
      current_statement__ = 166;
      context__.validate_dims("data initialization","N_U3","int",
           std::vector<size_t>{});
      N_U3 = std::numeric_limits<int>::min();
      
      current_statement__ = 166;
      N_U3 = context__.vals_i("N_U3")[(1 - 1)];
      current_statement__ = 166;
      check_greater_or_equal(function__, "N_U3", N_U3, 0);
      current_statement__ = 167;
      validate_non_negative_index("U3_indexes", "use_U3 ? N_total : 0",
                                  (use_U3 ? N_total : 0));
      current_statement__ = 168;
      context__.validate_dims("data initialization","U3_indexes","int",
           std::vector<size_t>{static_cast<size_t>((use_U3 ? N_total : 0))});
      U3_indexes = std::vector<int>((use_U3 ? N_total : 0), std::numeric_limits<int>::min());
      
      
      current_statement__ = 168;
      U3_indexes = context__.vals_i("U3_indexes");
      current_statement__ = 169;
      context__.validate_dims("data initialization","use_SubjectPredictors",
          "int", std::vector<size_t>{});
      use_SubjectPredictors = std::numeric_limits<int>::min();
      
      current_statement__ = 169;
      use_SubjectPredictors = context__.vals_i("use_SubjectPredictors")[
          (1 - 1)];
      current_statement__ = 169;
      check_greater_or_equal(function__, "use_SubjectPredictors",
                             use_SubjectPredictors, 0);
      current_statement__ = 169;
      check_less_or_equal(function__, "use_SubjectPredictors",
                          use_SubjectPredictors, 1);
      current_statement__ = 170;
      context__.validate_dims("data initialization","N_SubjectPredictors",
          "int", std::vector<size_t>{});
      N_SubjectPredictors = std::numeric_limits<int>::min();
      
      current_statement__ = 170;
      N_SubjectPredictors = context__.vals_i("N_SubjectPredictors")[(1 - 1)];
      current_statement__ = 170;
      check_greater_or_equal(function__, "N_SubjectPredictors",
                             N_SubjectPredictors, 0);
      current_statement__ = 171;
      validate_non_negative_index("X_subject",
                                  "use_SubjectPredictors ? N_total : 0",
                                  (use_SubjectPredictors ? N_total : 0));
      current_statement__ = 172;
      validate_non_negative_index("X_subject",
                                  "use_SubjectPredictors ? N_SubjectPredictors : 0",
                                  (use_SubjectPredictors ?
                                     N_SubjectPredictors : 0));
      current_statement__ = 173;
      context__.validate_dims("data initialization","X_subject","double",
           std::vector<size_t>{
            static_cast<size_t>((use_SubjectPredictors ? N_total : 0)),
            static_cast<size_t>((use_SubjectPredictors ? N_SubjectPredictors
                                   : 0))});
      X_subject__ = Eigen::Matrix<double, -1, -1>((use_SubjectPredictors ?
                                                     N_total : 0), (
                                                                    use_SubjectPredictors
                                                                    ?
                                                                    N_SubjectPredictors
                                                                    : 0));
      new (&X_subject) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X_subject__.data(), (
        use_SubjectPredictors ? N_total : 0), (use_SubjectPredictors ?
                                                 N_SubjectPredictors : 0));
      
      
      {
        std::vector<local_scalar_t__> X_subject_flat__;
        current_statement__ = 173;
        X_subject_flat__ = context__.vals_r("X_subject");
        current_statement__ = 173;
        pos__ = 1;
        current_statement__ = 173;
        for (int sym1__ = 1;
             sym1__ <= (use_SubjectPredictors ? N_SubjectPredictors : 0);
             ++sym1__) {
          current_statement__ = 173;
          for (int sym2__ = 1;
               sym2__ <= (use_SubjectPredictors ? N_total : 0); ++sym2__) {
            current_statement__ = 173;
            assign(X_subject, X_subject_flat__[(pos__ - 1)],
              "assigning variable X_subject", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 173;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 174;
      context__.validate_dims("data initialization","use_Davidson","int",
           std::vector<size_t>{});
      use_Davidson = std::numeric_limits<int>::min();
      
      current_statement__ = 174;
      use_Davidson = context__.vals_i("use_Davidson")[(1 - 1)];
      current_statement__ = 174;
      check_greater_or_equal(function__, "use_Davidson", use_Davidson, 0);
      current_statement__ = 174;
      check_less_or_equal(function__, "use_Davidson", use_Davidson, 1);
      current_statement__ = 175;
      context__.validate_dims("data initialization","use_Generalized","int",
           std::vector<size_t>{});
      use_Generalized = std::numeric_limits<int>::min();
      
      current_statement__ = 175;
      use_Generalized = context__.vals_i("use_Generalized")[(1 - 1)];
      current_statement__ = 175;
      check_greater_or_equal(function__, "use_Generalized", use_Generalized,
                             0);
      current_statement__ = 175;
      check_less_or_equal(function__, "use_Generalized", use_Generalized, 1);
      current_statement__ = 176;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 176;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 176;
      check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 177;
      validate_non_negative_index("X", "use_Generalized ? N_players : 0",
                                  (use_Generalized ? N_players : 0));
      current_statement__ = 178;
      validate_non_negative_index("X", "use_Generalized ? K : 0",
                                  (use_Generalized ? K : 0));
      current_statement__ = 179;
      context__.validate_dims("data initialization","X","double",
           std::vector<size_t>{
            static_cast<size_t>((use_Generalized ? N_players : 0)),
            static_cast<size_t>((use_Generalized ? K : 0))});
      X__ = Eigen::Matrix<double, -1, -1>((use_Generalized ? N_players : 0), (
        use_Generalized ? K : 0));
      new (&X) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X__.data(), (
        use_Generalized ? N_players : 0), (use_Generalized ? K : 0));
      
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 179;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 179;
        pos__ = 1;
        current_statement__ = 179;
        for (int sym1__ = 1; sym1__ <= (use_Generalized ? K : 0); ++sym1__) {
          current_statement__ = 179;
          for (int sym2__ = 1; sym2__ <= (use_Generalized ? N_players : 0);
               ++sym2__) {
            current_statement__ = 179;
            assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", index_uni(sym2__), index_uni(sym1__));
            current_statement__ = 179;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 180;
      context__.validate_dims("data initialization","prior_lambda_std",
          "double", std::vector<size_t>{});
      prior_lambda_std = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 180;
      prior_lambda_std = context__.vals_r("prior_lambda_std")[(1 - 1)];
      current_statement__ = 180;
      check_greater_or_equal(function__, "prior_lambda_std",
                             prior_lambda_std, 0);
      current_statement__ = 181;
      context__.validate_dims("data initialization","prior_lambda_mu",
          "double", std::vector<size_t>{});
      prior_lambda_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 181;
      prior_lambda_mu = context__.vals_r("prior_lambda_mu")[(1 - 1)];
      current_statement__ = 182;
      context__.validate_dims("data initialization","prior_gm_std","double",
           std::vector<size_t>{});
      prior_gm_std = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 182;
      prior_gm_std = context__.vals_r("prior_gm_std")[(1 - 1)];
      current_statement__ = 182;
      check_greater_or_equal(function__, "prior_gm_std", prior_gm_std, 0);
      current_statement__ = 183;
      context__.validate_dims("data initialization","prior_gm_mu","double",
           std::vector<size_t>{});
      prior_gm_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 183;
      prior_gm_mu = context__.vals_r("prior_gm_mu")[(1 - 1)];
      current_statement__ = 184;
      context__.validate_dims("data initialization","prior_U1_std","double",
           std::vector<size_t>{});
      prior_U1_std = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 184;
      prior_U1_std = context__.vals_r("prior_U1_std")[(1 - 1)];
      current_statement__ = 184;
      check_greater_or_equal(function__, "prior_U1_std", prior_U1_std, 0);
      current_statement__ = 185;
      context__.validate_dims("data initialization","prior_U2_std","double",
           std::vector<size_t>{});
      prior_U2_std = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 185;
      prior_U2_std = context__.vals_r("prior_U2_std")[(1 - 1)];
      current_statement__ = 185;
      check_greater_or_equal(function__, "prior_U2_std", prior_U2_std, 0);
      current_statement__ = 186;
      context__.validate_dims("data initialization","prior_U3_std","double",
           std::vector<size_t>{});
      prior_U3_std = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 186;
      prior_U3_std = context__.vals_r("prior_U3_std")[(1 - 1)];
      current_statement__ = 186;
      check_greater_or_equal(function__, "prior_U3_std", prior_U3_std, 0);
      current_statement__ = 187;
      context__.validate_dims("data initialization","prior_nu_mu","double",
           std::vector<size_t>{});
      prior_nu_mu = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 187;
      prior_nu_mu = context__.vals_r("prior_nu_mu")[(1 - 1)];
      current_statement__ = 188;
      context__.validate_dims("data initialization","prior_nu_std","double",
           std::vector<size_t>{});
      prior_nu_std = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 188;
      prior_nu_std = context__.vals_r("prior_nu_std")[(1 - 1)];
      current_statement__ = 188;
      check_greater_or_equal(function__, "prior_nu_std", prior_nu_std, 0);
      current_statement__ = 189;
      context__.validate_dims("data initialization","prior_S_std","double",
           std::vector<size_t>{});
      prior_S_std = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 189;
      prior_S_std = context__.vals_r("prior_S_std")[(1 - 1)];
      current_statement__ = 189;
      check_greater_or_equal(function__, "prior_S_std", prior_S_std, 0);
      current_statement__ = 190;
      context__.validate_dims("data initialization","calc_log_lik","int",
           std::vector<size_t>{});
      calc_log_lik = std::numeric_limits<int>::min();
      
      current_statement__ = 190;
      calc_log_lik = context__.vals_i("calc_log_lik")[(1 - 1)];
      current_statement__ = 190;
      check_greater_or_equal(function__, "calc_log_lik", calc_log_lik, 0);
      current_statement__ = 190;
      check_less_or_equal(function__, "calc_log_lik", calc_log_lik, 1);
      current_statement__ = 191;
      validate_non_negative_index("lambda_param", "N_players", N_players);
      current_statement__ = 192;
      gm_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 192;
      gm_param_1dim__ = (use_Ordereffect ? 1 : 0);
      current_statement__ = 192;
      validate_non_negative_index("gm_param", "use_Ordereffect ? 1 : 0",
                                  gm_param_1dim__);
      current_statement__ = 193;
      nu_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 193;
      nu_param_1dim__ = (use_Davidson ? 1 : 0);
      current_statement__ = 193;
      validate_non_negative_index("nu_param", "use_Davidson ? 1 : 0",
                                  nu_param_1dim__);
      current_statement__ = 194;
      U1_std_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 194;
      U1_std_param_1dim__ = (use_U1 ? 1 : 0);
      current_statement__ = 194;
      validate_non_negative_index("U1_std_param", "use_U1 ? 1 : 0",
                                  U1_std_param_1dim__);
      current_statement__ = 195;
      U1_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 195;
      U1_param_1dim__ = (use_U1 ? N_players : 0);
      current_statement__ = 195;
      validate_non_negative_index("U1_param", "use_U1 ? N_players : 0",
                                  U1_param_1dim__);
      current_statement__ = 196;
      U1_param_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 196;
      U1_param_2dim__ = (use_U1 ? N_U1 : 0);
      current_statement__ = 196;
      validate_non_negative_index("U1_param", "use_U1 ? N_U1 : 0",
                                  U1_param_2dim__);
      current_statement__ = 197;
      U2_std_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 197;
      U2_std_param_1dim__ = (use_U2 ? 1 : 0);
      current_statement__ = 197;
      validate_non_negative_index("U2_std_param", "use_U2 ? 1 : 0",
                                  U2_std_param_1dim__);
      current_statement__ = 198;
      U2_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 198;
      U2_param_1dim__ = (use_U2 ? N_players : 0);
      current_statement__ = 198;
      validate_non_negative_index("U2_param", "use_U2 ? N_players : 0",
                                  U2_param_1dim__);
      current_statement__ = 199;
      U2_param_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 199;
      U2_param_2dim__ = (use_U2 ? N_U2 : 0);
      current_statement__ = 199;
      validate_non_negative_index("U2_param", "use_U2 ? N_U2 : 0",
                                  U2_param_2dim__);
      current_statement__ = 200;
      U3_std_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 200;
      U3_std_param_1dim__ = (use_U3 ? 1 : 0);
      current_statement__ = 200;
      validate_non_negative_index("U3_std_param", "use_U3 ? 1 : 0",
                                  U3_std_param_1dim__);
      current_statement__ = 201;
      U3_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 201;
      U3_param_1dim__ = (use_U3 ? N_players : 0);
      current_statement__ = 201;
      validate_non_negative_index("U3_param", "use_U3 ? N_players : 0",
                                  U3_param_1dim__);
      current_statement__ = 202;
      U3_param_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 202;
      U3_param_2dim__ = (use_U3 ? N_U3 : 0);
      current_statement__ = 202;
      validate_non_negative_index("U3_param", "use_U3 ? N_U3 : 0",
                                  U3_param_2dim__);
      current_statement__ = 203;
      S_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 203;
      S_param_1dim__ = (use_SubjectPredictors ? N_players : 0);
      current_statement__ = 203;
      validate_non_negative_index("S_param",
                                  "use_SubjectPredictors ? N_players : 0",
                                  S_param_1dim__);
      current_statement__ = 204;
      S_param_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 204;
      S_param_2dim__ = (use_SubjectPredictors ? N_SubjectPredictors : 0);
      current_statement__ = 204;
      validate_non_negative_index("S_param",
                                  "use_SubjectPredictors ? N_SubjectPredictors : 0",
                                  S_param_2dim__);
      current_statement__ = 205;
      B_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 205;
      B_param_1dim__ = (use_Generalized ? K : 0);
      current_statement__ = 205;
      validate_non_negative_index("B_param", "use_Generalized ? K : 0",
                                  B_param_1dim__);
      current_statement__ = 206;
      validate_non_negative_index("lambda", "N_players", N_players);
      current_statement__ = 207;
      validate_non_negative_index("U1", "N_players", N_players);
      current_statement__ = 208;
      U1_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 208;
      U1_2dim__ = (use_U1 ? N_U1 : 1);
      current_statement__ = 208;
      validate_non_negative_index("U1", "use_U1 ? N_U1 : 1", U1_2dim__);
      current_statement__ = 209;
      validate_non_negative_index("U2", "N_players", N_players);
      current_statement__ = 210;
      U2_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 210;
      U2_2dim__ = (use_U2 ? N_U2 : 1);
      current_statement__ = 210;
      validate_non_negative_index("U2", "use_U2 ? N_U2 : 1", U2_2dim__);
      current_statement__ = 211;
      validate_non_negative_index("U3", "N_players", N_players);
      current_statement__ = 212;
      U3_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 212;
      U3_2dim__ = (use_U3 ? N_U3 : 1);
      current_statement__ = 212;
      validate_non_negative_index("U3", "use_U3 ? N_U3 : 1", U3_2dim__);
      current_statement__ = 213;
      validate_non_negative_index("S", "N_players", N_players);
      current_statement__ = 214;
      S_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 214;
      S_2dim__ = (use_SubjectPredictors ? N_SubjectPredictors : 1);
      current_statement__ = 214;
      validate_non_negative_index("S",
                                  "use_SubjectPredictors ? N_SubjectPredictors : 1",
                                  S_2dim__);
      current_statement__ = 215;
      B_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 215;
      B_1dim__ = (use_Generalized ? K : 1);
      current_statement__ = 215;
      validate_non_negative_index("B", "use_Generalized ? K : 1", B_1dim__);
      current_statement__ = 216;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 216;
      log_lik_1dim__ = (calc_log_lik ? N_total : 0);
      current_statement__ = 216;
      validate_non_negative_index("log_lik", "calc_log_lik ? N_total : 0",
                                  log_lik_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N_players + gm_param_1dim__ + nu_param_1dim__
       + U1_std_param_1dim__ + (U1_param_1dim__ * U1_param_2dim__)
       + U2_std_param_1dim__ + (U2_param_1dim__ * U2_param_2dim__)
       + U3_std_param_1dim__ + (U3_param_1dim__ * U3_param_2dim__)
       + (S_param_1dim__ * S_param_2dim__) + B_param_1dim__;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "bt_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> lambda_param;
      current_statement__ = 1;
      lambda_param = in__.template read<std::vector<local_scalar_t__>>(
                       N_players);
      std::vector<local_scalar_t__> gm_param;
      current_statement__ = 2;
      gm_param = in__.template read<std::vector<local_scalar_t__>>(
                   gm_param_1dim__);
      std::vector<local_scalar_t__> nu_param;
      current_statement__ = 3;
      nu_param = in__.template read<std::vector<local_scalar_t__>>(
                   nu_param_1dim__);
      std::vector<local_scalar_t__> U1_std_param;
      current_statement__ = 4;
      U1_std_param = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                       0, lp__, U1_std_param_1dim__);
      std::vector<std::vector<local_scalar_t__>> U1_param;
      current_statement__ = 5;
      U1_param = in__.template read<std::vector<std::vector<local_scalar_t__>>>(
                   U1_param_1dim__, U1_param_2dim__);
      std::vector<local_scalar_t__> U2_std_param;
      current_statement__ = 6;
      U2_std_param = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                       0, lp__, U2_std_param_1dim__);
      std::vector<std::vector<local_scalar_t__>> U2_param;
      current_statement__ = 7;
      U2_param = in__.template read<std::vector<std::vector<local_scalar_t__>>>(
                   U2_param_1dim__, U2_param_2dim__);
      std::vector<local_scalar_t__> U3_std_param;
      current_statement__ = 8;
      U3_std_param = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                       0, lp__, U3_std_param_1dim__);
      std::vector<std::vector<local_scalar_t__>> U3_param;
      current_statement__ = 9;
      U3_param = in__.template read<std::vector<std::vector<local_scalar_t__>>>(
                   U3_param_1dim__, U3_param_2dim__);
      std::vector<std::vector<local_scalar_t__>> S_param;
      current_statement__ = 10;
      S_param = in__.template read<std::vector<std::vector<local_scalar_t__>>>(
                  S_param_1dim__, S_param_2dim__);
      std::vector<local_scalar_t__> B_param;
      current_statement__ = 11;
      B_param = in__.template read<std::vector<local_scalar_t__>>(
                  B_param_1dim__);
      std::vector<local_scalar_t__> lambda;
      lambda = std::vector<local_scalar_t__>(N_players, DUMMY_VAR__);
      
      local_scalar_t__ gm;
      gm = DUMMY_VAR__;
      
      local_scalar_t__ nu;
      nu = DUMMY_VAR__;
      
      local_scalar_t__ U1_std;
      U1_std = DUMMY_VAR__;
      
      std::vector<std::vector<local_scalar_t__>> U1;
      U1 = std::vector<std::vector<local_scalar_t__>>(N_players, std::vector<local_scalar_t__>(U1_2dim__, DUMMY_VAR__));
      
      
      local_scalar_t__ U2_std;
      U2_std = DUMMY_VAR__;
      
      std::vector<std::vector<local_scalar_t__>> U2;
      U2 = std::vector<std::vector<local_scalar_t__>>(N_players, std::vector<local_scalar_t__>(U2_2dim__, DUMMY_VAR__));
      
      
      local_scalar_t__ U3_std;
      U3_std = DUMMY_VAR__;
      
      std::vector<std::vector<local_scalar_t__>> U3;
      U3 = std::vector<std::vector<local_scalar_t__>>(N_players, std::vector<local_scalar_t__>(U3_2dim__, DUMMY_VAR__));
      
      
      std::vector<std::vector<local_scalar_t__>> S;
      S = std::vector<std::vector<local_scalar_t__>>(N_players, std::vector<local_scalar_t__>(S_2dim__, DUMMY_VAR__));
      
      
      std::vector<local_scalar_t__> B;
      B = std::vector<local_scalar_t__>(B_1dim__, DUMMY_VAR__);
      
      current_statement__ = 27;
      if (use_Davidson) {
        current_statement__ = 25;
        nu = rvalue(nu_param, "nu_param", index_uni(1));
      } else {
        current_statement__ = 23;
        nu = 0;
      }
      current_statement__ = 32;
      if (use_Ordereffect) {
        current_statement__ = 30;
        gm = rvalue(gm_param, "gm_param", index_uni(1));
      } else {
        current_statement__ = 28;
        gm = 0;
      }
      current_statement__ = 41;
      if (use_U1) {
        current_statement__ = 38;
        U1_std = rvalue(U1_std_param, "U1_std_param", index_uni(1));
        current_statement__ = 39;
        assign(U1, U1_param, "assigning variable U1");
      } else {
        current_statement__ = 33;
        U1_std = 0;
        current_statement__ = 36;
        for (int i = 1; i <= N_players; ++i) {
          current_statement__ = 34;
          assign(U1, 0, "assigning variable U1", index_uni(i), index_uni(1));
        }
      }
      current_statement__ = 50;
      if (use_U2) {
        current_statement__ = 47;
        U2_std = rvalue(U2_std_param, "U2_std_param", index_uni(1));
        current_statement__ = 48;
        assign(U2, U2_param, "assigning variable U2");
      } else {
        current_statement__ = 42;
        U2_std = 0;
        current_statement__ = 45;
        for (int i = 1; i <= N_players; ++i) {
          current_statement__ = 43;
          assign(U2, 0, "assigning variable U2", index_uni(i), index_uni(1));
        }
      }
      current_statement__ = 59;
      if (use_U3) {
        current_statement__ = 56;
        U3_std = rvalue(U3_std_param, "U3_std_param", index_uni(1));
        current_statement__ = 57;
        assign(U3, U3_param, "assigning variable U3");
      } else {
        current_statement__ = 51;
        U3_std = 0;
        current_statement__ = 54;
        for (int i = 1; i <= N_players; ++i) {
          current_statement__ = 52;
          assign(U3, 0, "assigning variable U3", index_uni(i), index_uni(1));
        }
      }
      current_statement__ = 66;
      if (use_SubjectPredictors) {
        current_statement__ = 64;
        assign(S, S_param, "assigning variable S");
      } else {
        current_statement__ = 62;
        for (int i = 1; i <= N_players; ++i) {
          current_statement__ = 60;
          assign(S, 0, "assigning variable S", index_uni(i), index_uni(1));
        }
      }
      current_statement__ = 75;
      if (use_Generalized) {
        current_statement__ = 70;
        assign(B, B_param, "assigning variable B");
        current_statement__ = 73;
        for (int i = 1; i <= N_players; ++i) {
          current_statement__ = 71;
          assign(lambda,
            dot_product(to_vector(B_param),
              to_vector(rvalue(X, "X", index_uni(i), index_omni()))),
            "assigning variable lambda", index_uni(i));
        }
      } else {
        current_statement__ = 67;
        assign(B, 0, "assigning variable B", index_uni(1));
        current_statement__ = 68;
        assign(lambda, lambda_param, "assigning variable lambda");
      }
      current_statement__ = 15;
      check_greater_or_equal(function__, "U1_std", U1_std, 0);
      current_statement__ = 17;
      check_greater_or_equal(function__, "U2_std", U2_std, 0);
      current_statement__ = 19;
      check_greater_or_equal(function__, "U3_std", U3_std, 0);
      {
        current_statement__ = 92;
        lp_accum__.add(
          normal_lpdf<propto__>(lambda_param, prior_lambda_mu,
            prior_lambda_std));
        current_statement__ = 95;
        if (use_Ordereffect) {
          current_statement__ = 93;
          lp_accum__.add(
            normal_lpdf<propto__>(gm_param, prior_gm_mu, prior_gm_std));
        } 
        current_statement__ = 103;
        if (use_U1) {
          current_statement__ = 96;
          lp_accum__.add(normal_lpdf<propto__>(U1_std_param, 0, prior_U1_std));
          current_statement__ = 101;
          for (int i = 1; i <= N_players; ++i) {
            current_statement__ = 99;
            for (int j = 1; j <= N_U1; ++j) {
              current_statement__ = 97;
              lp_accum__.add(
                normal_lpdf<propto__>(
                  rvalue(U1_param, "U1_param", index_uni(i), index_uni(j)),
                  0, 1));
            }
          }
        } 
        current_statement__ = 111;
        if (use_U2) {
          current_statement__ = 104;
          lp_accum__.add(normal_lpdf<propto__>(U2_std_param, 0, prior_U2_std));
          current_statement__ = 109;
          for (int i = 1; i <= N_players; ++i) {
            current_statement__ = 107;
            for (int j = 1; j <= N_U2; ++j) {
              current_statement__ = 105;
              lp_accum__.add(
                normal_lpdf<propto__>(
                  rvalue(U2_param, "U2_param", index_uni(i), index_uni(j)),
                  0, 1));
            }
          }
        } 
        current_statement__ = 119;
        if (use_U3) {
          current_statement__ = 112;
          lp_accum__.add(normal_lpdf<propto__>(U3_std_param, 0, prior_U3_std));
          current_statement__ = 117;
          for (int i = 1; i <= N_players; ++i) {
            current_statement__ = 115;
            for (int j = 1; j <= N_U3; ++j) {
              current_statement__ = 113;
              lp_accum__.add(
                normal_lpdf<propto__>(
                  rvalue(U3_param, "U3_param", index_uni(i), index_uni(j)),
                  0, 1));
            }
          }
        } 
        current_statement__ = 122;
        if (use_Davidson) {
          current_statement__ = 120;
          lp_accum__.add(
            normal_lpdf<propto__>(nu_param, prior_nu_mu, prior_nu_std));
        } 
        current_statement__ = 125;
        if (use_Generalized) {
          current_statement__ = 123;
          lp_accum__.add(
            normal_lpdf<propto__>(B_param, prior_lambda_mu, prior_lambda_std));
        } 
        current_statement__ = 132;
        if (use_SubjectPredictors) {
          current_statement__ = 130;
          for (int i = 1; i <= N_players; ++i) {
            current_statement__ = 128;
            for (int j = 1; j <= N_SubjectPredictors; ++j) {
              current_statement__ = 126;
              lp_accum__.add(
                normal_lpdf<propto__>(
                  rvalue(S_param, "S_param", index_uni(i), index_uni(j)), 0,
                  prior_S_std));
            }
          }
        } 
        current_statement__ = 145;
        for (int i = 1; i <= N_total; ++i) {
          local_scalar_t__ p1_win;
          p1_win = DUMMY_VAR__;
          
          local_scalar_t__ p_tie;
          p_tie = DUMMY_VAR__;
          
          std::vector<local_scalar_t__> p_win_ties;
          current_statement__ = 136;
          assign(p_win_ties,
            calculate_p1_win_and_ties(i, player1_indexes, player0_indexes,
              lambda, use_Ordereffect, z_player1, gm, use_Davidson, nu,
              use_U1, U1_indexes, U1, U1_std, use_U2, U2_indexes, U2, U2_std,
              use_U3, U2_indexes, U3, U3_std, use_SubjectPredictors, S,
              X_subject, pstream__), "assigning variable p_win_ties");
          current_statement__ = 137;
          p1_win = rvalue(p_win_ties, "p_win_ties", index_uni(1));
          current_statement__ = 138;
          p_tie = rvalue(p_win_ties, "p_win_ties", index_uni(2));
          current_statement__ = 143;
          if (logical_eq(rvalue(y, "y", index_uni(i)), 2)) {
            current_statement__ = 141;
            lp_accum__.add(bernoulli_lpmf<false>(1, p_tie));
          } else {
            current_statement__ = 139;
            lp_accum__.add(
              bernoulli_lpmf<false>(rvalue(y, "y", index_uni(i)), p1_win));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "bt_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> lambda_param;
      current_statement__ = 1;
      lambda_param = in__.template read<std::vector<local_scalar_t__>>(
                       N_players);
      std::vector<double> gm_param;
      current_statement__ = 2;
      gm_param = in__.template read<std::vector<local_scalar_t__>>(
                   gm_param_1dim__);
      std::vector<double> nu_param;
      current_statement__ = 3;
      nu_param = in__.template read<std::vector<local_scalar_t__>>(
                   nu_param_1dim__);
      std::vector<double> U1_std_param;
      current_statement__ = 4;
      U1_std_param = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                       0, lp__, U1_std_param_1dim__);
      std::vector<std::vector<double>> U1_param;
      current_statement__ = 5;
      U1_param = in__.template read<std::vector<std::vector<local_scalar_t__>>>(
                   U1_param_1dim__, U1_param_2dim__);
      std::vector<double> U2_std_param;
      current_statement__ = 6;
      U2_std_param = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                       0, lp__, U2_std_param_1dim__);
      std::vector<std::vector<double>> U2_param;
      current_statement__ = 7;
      U2_param = in__.template read<std::vector<std::vector<local_scalar_t__>>>(
                   U2_param_1dim__, U2_param_2dim__);
      std::vector<double> U3_std_param;
      current_statement__ = 8;
      U3_std_param = in__.template read_constrain_lb<std::vector<local_scalar_t__>, jacobian__>(
                       0, lp__, U3_std_param_1dim__);
      std::vector<std::vector<double>> U3_param;
      current_statement__ = 9;
      U3_param = in__.template read<std::vector<std::vector<local_scalar_t__>>>(
                   U3_param_1dim__, U3_param_2dim__);
      std::vector<std::vector<double>> S_param;
      current_statement__ = 10;
      S_param = in__.template read<std::vector<std::vector<local_scalar_t__>>>(
                  S_param_1dim__, S_param_2dim__);
      std::vector<double> B_param;
      current_statement__ = 11;
      B_param = in__.template read<std::vector<local_scalar_t__>>(
                  B_param_1dim__);
      std::vector<double> lambda;
      lambda = std::vector<double>(N_players, std::numeric_limits<double>::quiet_NaN());
      
      
      double gm;
      gm = std::numeric_limits<double>::quiet_NaN();
      
      double nu;
      nu = std::numeric_limits<double>::quiet_NaN();
      
      double U1_std;
      U1_std = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<std::vector<double>> U1;
      U1 = std::vector<std::vector<double>>(N_players, std::vector<double>(U1_2dim__, std::numeric_limits<double>::quiet_NaN()));
      
      
      double U2_std;
      U2_std = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<std::vector<double>> U2;
      U2 = std::vector<std::vector<double>>(N_players, std::vector<double>(U2_2dim__, std::numeric_limits<double>::quiet_NaN()));
      
      
      double U3_std;
      U3_std = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<std::vector<double>> U3;
      U3 = std::vector<std::vector<double>>(N_players, std::vector<double>(U3_2dim__, std::numeric_limits<double>::quiet_NaN()));
      
      
      std::vector<std::vector<double>> S;
      S = std::vector<std::vector<double>>(N_players, std::vector<double>(S_2dim__, std::numeric_limits<double>::quiet_NaN()));
      
      
      std::vector<double> B;
      B = std::vector<double>(B_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      
      out__.write(lambda_param);
      out__.write(gm_param);
      out__.write(nu_param);
      out__.write(U1_std_param);
      for (int sym1__ = 1; sym1__ <= U1_param_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= U1_param_1dim__; ++sym2__) {
          out__.write(U1_param[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(U2_std_param);
      for (int sym1__ = 1; sym1__ <= U2_param_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= U2_param_1dim__; ++sym2__) {
          out__.write(U2_param[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(U3_std_param);
      for (int sym1__ = 1; sym1__ <= U3_param_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= U3_param_1dim__; ++sym2__) {
          out__.write(U3_param[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= S_param_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= S_param_1dim__; ++sym2__) {
          out__.write(S_param[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(B_param);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 27;
      if (use_Davidson) {
        current_statement__ = 25;
        nu = rvalue(nu_param, "nu_param", index_uni(1));
      } else {
        current_statement__ = 23;
        nu = 0;
      }
      current_statement__ = 32;
      if (use_Ordereffect) {
        current_statement__ = 30;
        gm = rvalue(gm_param, "gm_param", index_uni(1));
      } else {
        current_statement__ = 28;
        gm = 0;
      }
      current_statement__ = 41;
      if (use_U1) {
        current_statement__ = 38;
        U1_std = rvalue(U1_std_param, "U1_std_param", index_uni(1));
        current_statement__ = 39;
        assign(U1, U1_param, "assigning variable U1");
      } else {
        current_statement__ = 33;
        U1_std = 0;
        current_statement__ = 36;
        for (int i = 1; i <= N_players; ++i) {
          current_statement__ = 34;
          assign(U1, 0, "assigning variable U1", index_uni(i), index_uni(1));
        }
      }
      current_statement__ = 50;
      if (use_U2) {
        current_statement__ = 47;
        U2_std = rvalue(U2_std_param, "U2_std_param", index_uni(1));
        current_statement__ = 48;
        assign(U2, U2_param, "assigning variable U2");
      } else {
        current_statement__ = 42;
        U2_std = 0;
        current_statement__ = 45;
        for (int i = 1; i <= N_players; ++i) {
          current_statement__ = 43;
          assign(U2, 0, "assigning variable U2", index_uni(i), index_uni(1));
        }
      }
      current_statement__ = 59;
      if (use_U3) {
        current_statement__ = 56;
        U3_std = rvalue(U3_std_param, "U3_std_param", index_uni(1));
        current_statement__ = 57;
        assign(U3, U3_param, "assigning variable U3");
      } else {
        current_statement__ = 51;
        U3_std = 0;
        current_statement__ = 54;
        for (int i = 1; i <= N_players; ++i) {
          current_statement__ = 52;
          assign(U3, 0, "assigning variable U3", index_uni(i), index_uni(1));
        }
      }
      current_statement__ = 66;
      if (use_SubjectPredictors) {
        current_statement__ = 64;
        assign(S, S_param, "assigning variable S");
      } else {
        current_statement__ = 62;
        for (int i = 1; i <= N_players; ++i) {
          current_statement__ = 60;
          assign(S, 0, "assigning variable S", index_uni(i), index_uni(1));
        }
      }
      current_statement__ = 75;
      if (use_Generalized) {
        current_statement__ = 70;
        assign(B, B_param, "assigning variable B");
        current_statement__ = 73;
        for (int i = 1; i <= N_players; ++i) {
          current_statement__ = 71;
          assign(lambda,
            dot_product(to_vector(B_param),
              to_vector(rvalue(X, "X", index_uni(i), index_omni()))),
            "assigning variable lambda", index_uni(i));
        }
      } else {
        current_statement__ = 67;
        assign(B, 0, "assigning variable B", index_uni(1));
        current_statement__ = 68;
        assign(lambda, lambda_param, "assigning variable lambda");
      }
      current_statement__ = 15;
      check_greater_or_equal(function__, "U1_std", U1_std, 0);
      current_statement__ = 17;
      check_greater_or_equal(function__, "U2_std", U2_std, 0);
      current_statement__ = 19;
      check_greater_or_equal(function__, "U3_std", U3_std, 0);
      if (emit_transformed_parameters__) {
        out__.write(lambda);
        out__.write(gm);
        out__.write(nu);
        out__.write(U1_std);
        for (int sym1__ = 1; sym1__ <= U1_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_players; ++sym2__) {
            out__.write(U1[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(U2_std);
        for (int sym1__ = 1; sym1__ <= U2_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_players; ++sym2__) {
            out__.write(U2[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(U3_std);
        for (int sym1__ = 1; sym1__ <= U3_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_players; ++sym2__) {
            out__.write(U3[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= S_2dim__; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_players; ++sym2__) {
            out__.write(S[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(B);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik;
      log_lik = Eigen::Matrix<double, -1, 1>(log_lik_1dim__);
      stan::math::fill(log_lik, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 91;
      if (calc_log_lik) {
        current_statement__ = 89;
        for (int i = 1; i <= N_total; ++i) {
          double p1_win;
          p1_win = std::numeric_limits<double>::quiet_NaN();
          
          double p_tie;
          p_tie = std::numeric_limits<double>::quiet_NaN();
          
          std::vector<double> p_win_ties;
          current_statement__ = 80;
          assign(p_win_ties,
            calculate_p1_win_and_ties(i, player1_indexes, player0_indexes,
              lambda, use_Ordereffect, z_player1, gm, use_Davidson, nu,
              use_U1, U1_indexes, U1, U1_std, use_U2, U2_indexes, U2, U2_std,
              use_U3, U2_indexes, U3, U3_std, use_SubjectPredictors, S,
              X_subject, pstream__), "assigning variable p_win_ties");
          current_statement__ = 81;
          p1_win = rvalue(p_win_ties, "p_win_ties", index_uni(1));
          current_statement__ = 82;
          p_tie = rvalue(p_win_ties, "p_win_ties", index_uni(2));
          current_statement__ = 87;
          if (logical_eq(rvalue(y, "y", index_uni(i)), 2)) {
            current_statement__ = 85;
            assign(log_lik, bernoulli_lpmf<false>(1, p_tie),
              "assigning variable log_lik", index_uni(i));
          } else {
            current_statement__ = 83;
            assign(log_lik,
              bernoulli_lpmf<false>(rvalue(y, "y", index_uni(i)), p1_win),
              "assigning variable log_lik", index_uni(i));
          }
        }
      } 
      out__.write(log_lik);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__;
      pos__ = 1;
      std::vector<local_scalar_t__> lambda_param;
      lambda_param = std::vector<local_scalar_t__>(N_players, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= N_players; ++sym1__) {
        lambda_param[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(lambda_param);
      std::vector<local_scalar_t__> gm_param;
      gm_param = std::vector<local_scalar_t__>(gm_param_1dim__, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= gm_param_1dim__; ++sym1__) {
        gm_param[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(gm_param);
      std::vector<local_scalar_t__> nu_param;
      nu_param = std::vector<local_scalar_t__>(nu_param_1dim__, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= nu_param_1dim__; ++sym1__) {
        nu_param[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(nu_param);
      std::vector<local_scalar_t__> U1_std_param;
      U1_std_param = std::vector<local_scalar_t__>(U1_std_param_1dim__, DUMMY_VAR__);
      
      
      for (int sym1__ = 1; sym1__ <= U1_std_param_1dim__; ++sym1__) {
        U1_std_param[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, U1_std_param);
      std::vector<std::vector<local_scalar_t__>> U1_param;
      U1_param = std::vector<std::vector<local_scalar_t__>>(U1_param_1dim__, std::vector<local_scalar_t__>(U1_param_2dim__, DUMMY_VAR__));
      
      
      for (int sym1__ = 1; sym1__ <= U1_param_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= U1_param_1dim__; ++sym2__) {
          U1_param[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>(
                                                   );
        }
      }
      out__.write(U1_param);
      std::vector<local_scalar_t__> U2_std_param;
      U2_std_param = std::vector<local_scalar_t__>(U2_std_param_1dim__, DUMMY_VAR__);
      
      
      for (int sym1__ = 1; sym1__ <= U2_std_param_1dim__; ++sym1__) {
        U2_std_param[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, U2_std_param);
      std::vector<std::vector<local_scalar_t__>> U2_param;
      U2_param = std::vector<std::vector<local_scalar_t__>>(U2_param_1dim__, std::vector<local_scalar_t__>(U2_param_2dim__, DUMMY_VAR__));
      
      
      for (int sym1__ = 1; sym1__ <= U2_param_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= U2_param_1dim__; ++sym2__) {
          U2_param[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>(
                                                   );
        }
      }
      out__.write(U2_param);
      std::vector<local_scalar_t__> U3_std_param;
      U3_std_param = std::vector<local_scalar_t__>(U3_std_param_1dim__, DUMMY_VAR__);
      
      
      for (int sym1__ = 1; sym1__ <= U3_std_param_1dim__; ++sym1__) {
        U3_std_param[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, U3_std_param);
      std::vector<std::vector<local_scalar_t__>> U3_param;
      U3_param = std::vector<std::vector<local_scalar_t__>>(U3_param_1dim__, std::vector<local_scalar_t__>(U3_param_2dim__, DUMMY_VAR__));
      
      
      for (int sym1__ = 1; sym1__ <= U3_param_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= U3_param_1dim__; ++sym2__) {
          U3_param[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>(
                                                   );
        }
      }
      out__.write(U3_param);
      std::vector<std::vector<local_scalar_t__>> S_param;
      S_param = std::vector<std::vector<local_scalar_t__>>(S_param_1dim__, std::vector<local_scalar_t__>(S_param_2dim__, DUMMY_VAR__));
      
      
      for (int sym1__ = 1; sym1__ <= S_param_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= S_param_1dim__; ++sym2__) {
          S_param[(sym2__ - 1)][(sym1__ - 1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write(S_param);
      std::vector<local_scalar_t__> B_param;
      B_param = std::vector<local_scalar_t__>(B_param_1dim__, DUMMY_VAR__);
      
      for (int sym1__ = 1; sym1__ <= B_param_1dim__; ++sym1__) {
        B_param[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write(B_param);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"lambda_param", "gm_param",
      "nu_param", "U1_std_param", "U1_param", "U2_std_param", "U2_param",
      "U3_std_param", "U3_param", "S_param", "B_param", "lambda", "gm", "nu",
      "U1_std", "U1", "U2_std", "U2", "U3_std", "U3", "S", "B", "log_lik"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N_players)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(gm_param_1dim__)},
      std::vector<size_t>{static_cast<size_t>(nu_param_1dim__)},
      std::vector<size_t>{static_cast<size_t>(U1_std_param_1dim__)},
      std::vector<size_t>{static_cast<size_t>(U1_param_1dim__),
                          static_cast<size_t>(U1_param_2dim__)},
      std::vector<size_t>{static_cast<size_t>(U2_std_param_1dim__)},
      std::vector<size_t>{static_cast<size_t>(U2_param_1dim__),
                          static_cast<size_t>(U2_param_2dim__)},
      std::vector<size_t>{static_cast<size_t>(U3_std_param_1dim__)},
      std::vector<size_t>{static_cast<size_t>(U3_param_1dim__),
                          static_cast<size_t>(U3_param_2dim__)},
      std::vector<size_t>{static_cast<size_t>(S_param_1dim__),
                          static_cast<size_t>(S_param_2dim__)},
      std::vector<size_t>{static_cast<size_t>(B_param_1dim__)},
      std::vector<size_t>{static_cast<size_t>(N_players)},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      },
      std::vector<size_t>{static_cast<size_t>(N_players),
                          static_cast<size_t>(U1_2dim__)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_players),
                          static_cast<size_t>(U2_2dim__)},
      std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(N_players),
                          static_cast<size_t>(U3_2dim__)},
      std::vector<size_t>{static_cast<size_t>(N_players),
                          static_cast<size_t>(S_2dim__)},
      std::vector<size_t>{static_cast<size_t>(B_1dim__)},
      std::vector<size_t>{static_cast<size_t>(log_lik_1dim__)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_players; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_param" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= gm_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gm_param" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= nu_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nu_param" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= U1_std_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U1_std_param" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= U1_param_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= U1_param_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "U1_param" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= U2_std_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U2_std_param" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= U2_param_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= U2_param_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "U2_param" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= U3_std_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U3_std_param" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= U3_param_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= U3_param_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "U3_param" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= S_param_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= S_param_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "S_param" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= B_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "B_param" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_players; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "gm");
      param_names__.emplace_back(std::string() + "nu");
      param_names__.emplace_back(std::string() + "U1_std");
      for (int sym1__ = 1; sym1__ <= U1_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_players; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "U1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "U2_std");
      for (int sym1__ = 1; sym1__ <= U2_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_players; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "U2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "U3_std");
      for (int sym1__ = 1; sym1__ <= U3_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_players; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "U3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_players; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "S" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= B_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "B" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_players; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_param" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= gm_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gm_param" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= nu_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nu_param" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= U1_std_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U1_std_param" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= U1_param_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= U1_param_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "U1_param" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= U2_std_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U2_std_param" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= U2_param_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= U2_param_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "U2_param" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= U3_std_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "U3_std_param" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= U3_param_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= U3_param_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "U3_param" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= S_param_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= S_param_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "S_param" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= B_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "B_param" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= N_players; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
        } 
      }
      param_names__.emplace_back(std::string() + "gm");
      param_names__.emplace_back(std::string() + "nu");
      param_names__.emplace_back(std::string() + "U1_std");
      for (int sym1__ = 1; sym1__ <= U1_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_players; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "U1" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "U2_std");
      for (int sym1__ = 1; sym1__ <= U2_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_players; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "U2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      param_names__.emplace_back(std::string() + "U3_std");
      for (int sym1__ = 1; sym1__ <= U3_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_players; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "U3" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= S_2dim__; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_players; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "S" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= B_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "B" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"lambda_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_players) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gm_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gm_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nu_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nu_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"U1_std_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(U1_std_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"U1_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(U1_param_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(U1_param_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"U2_std_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(U2_std_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"U2_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(U2_param_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(U2_param_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"U3_std_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(U3_std_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"U3_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(U3_param_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(U3_param_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"S_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S_param_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(S_param_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"B_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(B_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_players) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"gm\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"U1_std\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"U1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_players) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(U1_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"U2_std\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"U2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_players) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(U2_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"U3_std\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"U3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_players) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(U3_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"S\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_players) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(S_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"B\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(B_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"lambda_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_players) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gm_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(gm_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nu_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(nu_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"U1_std_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(U1_std_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"U1_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(U1_param_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(U1_param_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"U2_std_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(U2_std_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"U2_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(U2_param_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(U2_param_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"U3_std_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(U3_std_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"U3_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(U3_param_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(U3_param_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"S_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(S_param_1dim__) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(S_param_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"B_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(B_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_players) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"gm\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"U1_std\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"U1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_players) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(U1_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"U2_std\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"U2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_players) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(U2_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"U3_std\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"U3\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_players) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(U3_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"S\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_players) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(S_2dim__) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"B\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(B_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_1dim__) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((N_players + gm_param_1dim__) + nu_param_1dim__) +
           U1_std_param_1dim__) + (U1_param_1dim__ * U1_param_2dim__)) +
         U2_std_param_1dim__) + (U2_param_1dim__ * U2_param_2dim__)) +
       U3_std_param_1dim__) + (U3_param_1dim__ * U3_param_2dim__)) +
     (S_param_1dim__ * S_param_2dim__)) + B_param_1dim__);
      const size_t num_transformed = 
  ((((((((((N_players + 1) + 1) + 1) + (N_players * U1_2dim__)) + 1) +
        (N_players * U2_2dim__)) + 1) + (N_players * U3_2dim__)) +
     (N_players * S_2dim__)) + B_1dim__);
      const size_t num_gen_quantities = log_lik_1dim__;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((N_players + gm_param_1dim__) + nu_param_1dim__) +
           U1_std_param_1dim__) + (U1_param_1dim__ * U1_param_2dim__)) +
         U2_std_param_1dim__) + (U2_param_1dim__ * U2_param_2dim__)) +
       U3_std_param_1dim__) + (U3_param_1dim__ * U3_param_2dim__)) +
     (S_param_1dim__ * S_param_2dim__)) + B_param_1dim__);
      const size_t num_transformed = 
  ((((((((((N_players + 1) + 1) + 1) + (N_players * U1_2dim__)) + 1) +
        (N_players * U2_2dim__)) + 1) + (N_players * U3_2dim__)) +
     (N_players * S_2dim__)) + B_1dim__);
      const size_t num_gen_quantities = log_lik_1dim__;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 11> names__{"lambda_param",
   "gm_param", "nu_param", "U1_std_param", "U1_param", "U2_std_param",
   "U2_param", "U3_std_param", "U3_param", "S_param", "B_param"};
     const std::array<Eigen::Index, 11> num_params__{N_players,
   gm_param_1dim__, nu_param_1dim__, U1_std_param_1dim__,
   (U1_param_1dim__ * U1_param_2dim__), U2_std_param_1dim__,
   (U2_param_1dim__ * U2_param_2dim__), U3_std_param_1dim__,
   (U3_param_1dim__ * U3_param_2dim__), (S_param_1dim__ * S_param_2dim__),
   B_param_1dim__};
    
     std::vector<double> params_r_flat__(num_params_r__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < num_params__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(params_r_flat__.size());
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = bt_model_namespace::bt_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return bt_model_namespace::profiles__;
}

#endif


